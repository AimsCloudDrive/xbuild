// scripts/build-self.ts
import { buildCommand } from "../src/commands/build";
import { compileCommand } from "../src/commands/compile";
import { checkCommand } from "../src/commands/check";
import { Logger } from "../src/utils/logger";
import fs from "fs-extra";
import path from "path";

const logger = new Logger("SelfBuild");

async function cleanDist() {
  logger.info("Cleaning previous build artifacts...");
  await fs.remove(path.join(process.cwd(), "dist"));
  await fs.remove(path.join(process.cwd(), "bin"));
  logger.success("Cleaned build artifacts");
}

async function buildSelf() {
  try {
    // 1. 清理旧构建
    await cleanDist();

    // 2. 使用 TypeScript 编译源代码
    logger.info("Compiling TypeScript source code...");
    await compileCommand({ config: "xbuild.self.config.ts" });

    // 3. 类型检查
    logger.info("Running type checking...");
    await checkCommand({ config: "xbuild.self.config.ts" });

    // 4. 完整构建
    logger.info("Starting full build process...");
    await buildCommand({ config: "xbuild.self.config.ts" });

    // 5. 创建可执行文件
    await createBinScript();

    logger.success("xbuild self-build completed successfully!");
    logger.info("You can now use the built version: bin/xbuild.js");
  } catch (error) {
    logger.error("Self-build failed:", error);
    process.exit(1);
  }
}

async function createBinScript() {
  const binDir = path.join(process.cwd(), "bin");
  const binFile = path.join(binDir, "xbuild.js");

  await fs.ensureDir(binDir);

  const binContent = `#!/usr/bin/env node
// This file is auto-generated by xbuild self-build process
require('../dist/cli.js');
`;

  await fs.writeFile(binFile, binContent, "utf-8");
  await fs.chmod(binFile, 0o755); // 设置可执行权限

  logger.success(`Created executable: bin/xbuild.js`);
}

// 执行自举构建
buildSelf();
